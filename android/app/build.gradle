def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new FileNotFoundException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
//firebase plugin 1
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

// Gradle 빌드시 key.properties 파일을 참조하도록
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        // 패키지명 수정함 : com.example.untitled2 ->
        applicationId "com.bonapetti.bonapetti"
        minSdkVersion 21 // 에러 해결을위해 19 ->21 수정.
        targetSdkVersion 30
        compileSdkVersion 30
        // firebase setting 3 - multiDexEnabled true
        multiDexEnabled true
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
//        ndk {
//            abiFilters "armeabi", "armeabi-v7a", "arm64-v8a"
//        }
    }

    // start of signingConfigs
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    // end of signingConfigs
    buildTypes {
        release {
            // release 속성으로 변경
            signingConfig signingConfigs.release
            // start of 코드 난독화 및 사이즈 축소
            minifyEnabled true
            shrinkResources true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // end of 코드 난독화 및 사이즈 축소
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    // firebase plugin 2 :
    // Import the firebase-bom : 앱애서 항상 호환되는 firebase 라이브러리 버전을 사용
    implementation platform('com.google.firebase:firebase-bom:28.3.0')
    // Add the dependency for the Firebase SDK for Google Analytics
    // When using the BoM, don't specify versions in Firebase dependencies
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava'
    // 에러 해결 위한 종속성 추가
    // error: ~cloud_firestore-3.1.0\android\src\main\java\io\flutter\plugins\firebase\firestore\streamhandler\TransactionStreamHandler.java uses unchecked or unsafe operations.
    implementation "androidx.multidex:multidex:2.0.0"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

}
